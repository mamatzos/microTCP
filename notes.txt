~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TIMELINE                                        EVENT               STATUS
1. Make socket (initialize),                    microtcp_socket()   DONE

2. Ascociate the packet with it's end host,     microtcp_bind()     DONE

3. Establish a connection,                      microtcp_connect()  DONE

4. Accept the incoming connection,              microtcp_accept()   DONE

5. Close the established connection,            microtcp_shutdown() DONE

6. Bandwidth testing                            bandwidth_test()    DONE

7. Send a packet                                microtcp_send()     TODAY

8. Receive a packet                             microtcp_receive()  SATURDAY - TUESDAY

9. Implement Peer - Host interaction            test_client() & test_server     28th - 30th

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    -recvfrom(): blocks the flow of the program until the data reached the
    address (provided in the arguents). When data reached target it returns
    the size in bytes. If invalid, -1 is returned.

    -socket-recbuf: initialized in the establishment of connection.
    initialized with malloc of the defined buffer length.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FUNCTIONS:

1. microtcp_socket
    Arguments:
        int domain:                      Specifies communication domain (ex IPv4, type of address)
        int type:                        Type of socket
        int protocol:                    TCP or UDP

    Operation:
        Creates a socket and returns the socket.

2. microtcp_bind
    Arguments:
        microtcp_sock_t *socket:         given socket
        const struct sockaddr *address:  given address 
        socklen_t address_len:           address size

    Operation:
        Assigns the given address to the socket

3. microtcp_connect
    Arguments:
        microtcp_sock_t socket:          given socket
        const struct sockaddr *address:  server address
        socklen_t address_len:           server's address size

    Operation:
        Initializes the 3 way handshake between the server and the client.

4. microtcp_accept
    Arguments:
        microtcp_sock_t *socket:         given socket
        struct sockaddr *address:        client address
        socklen_t address_len:           client's address size
    
    Operation:
        Accepts the connection request (3-way handshake) and initializes the connection
        from the server's side.

5. microtcp_shutdown
    Arguments:
        microtcp_sock_t *socket:      given socket
        int how:                      the type of shutdown (reads/writes/both, here both)

    Operation:
        Executes the closing steps of a connection, a sequence of FINs and ACKs. 
        Sets connection to closed.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTES:
    NOTES FOR CONNECT()
        FIRST -> init server's addr with given address (from arguments)
        
        a. create a packet (SYN) to be sent as 1st handshake
        b. send 1st handshake                                        (SYN)
        c. wait for 2nd handshake and check it                       (SYN-ACK)
        d. if 2nd is ok create 3rd handshake and send it             (ACK)
        e. assume connection established

    NOTES FOR ACCEPT()
        FIRST -> init client's addr with given address (from arguments)
        
        a. create the packet, about to be received (1st)
        b. receive 1st handshake (sent from client) and check it     (SYN)
        c. if 1st handshake is ok then we create 2nd handshake       (SYN-ACK) 
        d. check 3rd handshake received from client                  (ACK)
        e. connection established...
    
    NOTES FOR SHUTDOWN()
        a. create clients FIN packet and send it                     (FIN)
        b. server received it and validate it is FIN
        c. server sends ACK and sets state as CLOSING_BY_PEER        (ACK)
            !! server does not increase ACK value because it
            doesn't expect more data before sending a FIN
        d. client receive ACK and sets state as CLOSING_BY_HOST
        e. server sends a FIN packet to client                       (FIN)
        f. client receives FIN, validates its a FIN
        g. client creates and send an ACK                            (ACK)
        h. SOCKET CLOSED

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~ HEADER
    a. added a definition for control bits    ### ask in exam if sequence is correct

    b. added extra fields in socket about client and server address. To be initialized
    in connect() and accept() (server addr initialized in connect() and client's in 
    accept()). 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~> SEND AND RECEIVE PACKET NEXT PHASE

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~