~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TIMELINE                                        EVENT               STATUS
1. Make socket (initialize),                    microtcp_socket()   DONE

2. Ascociate the packet with it's end host,     microtcp_bind()     DONE

3. Establish a connection,                      microtcp_connect()  DONE

4. Accept the incoming connection,              microtcp_accept()   DONE

5. Close the established connection,            microtcp_shutdown() DONE

6. Bandwidth testing                            bandwidth_test()    monday

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TO KNOW (for examination)
~ LEARN EACH ARGUMENT's OPERATION (all functions)

~ socket()      (operation / return)
~ microtcp_sock_t fields && initialized values (why / reason)

~ bind()        (operation / return)    

~ connect()     (operation / return)
    -the casting to uint8_t is done because thats the required type

    -sendto(): if address is wrong then it returns -1, else if all good
    the size (in bytes) of the packet that is about to be sent is returned
    at first the size is 0 thats why we use it for error checking olny.

    -recvfrom(): blocks the flow of the program until the data reached the
    address (provided in the arguents). When data reached target it returns
    the size in bytes. If invalid, -1 is returned.

    -socket-recbuf: initialized in the establishment of connection.
    initialized with malloc of the defined buffer length.

    -init server's addr with given address (from arguments)

~ accept()      (operation / return)
    -init client's addr with given address (from arguments)

~ shutdown()    (operation / return)
    maybe 
    
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTES:
    NOTES FOR CONNECT()
        a. create a packet (SYN) to be sent as 1st handshake
        b. send 1st handshake                                        (SYN)
        c. wait for 2nd handshake and check it                       (SYN-ACK)
        d. if 2nd is ok create 3rd handshake and send it             (ACK)
        e. assume connection established

    NOTES FOR ACCEPT()
        a. create the packet, about to be received (1st)
        b. receive 1st handshake (sent from client) and check it     (SYN)
        c. if 1st handshake is ok then we create 2nd handshake       (SYN-ACK) 
        d. check 3rd handshake received from client                  (ACK)
        e. connection established...
    
    NOTES FOR SHUTDOWN()
        a. create clients FIN packet and send it                     (FIN)
        b. server received it and validate it is FIN
        c. server sends ACK and sets state as CLOSING_BY_PEER        (ACK)
            !! server does not increase ACK value because it
            doesn't expect more data before sending a FIN
        d. client receive ACK and sets state as CLOSING_BY_HOST
        e. server sends a FIN packet to client                       (FIN)
        f. client receives FIN, validates its a FIN
        g. client creates and send an ACK                            (ACK)
        h. SOCKET CLOSED


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~ HEADER
    a. added a definition for control bits    ### ask in exam if sequence is correct

    b. added extra fields in socket about client and server address. To be initialized
    in connect() and accept() (server addr initialized in connect() and client's in 
    accept()). 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

USEFUL INFO
SEGMENT --> Bytes
WINDOW  --> Bytes

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~> SEND AND RECEIVE PACKET NEXT PHASE

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~ NOTES FOR TODAY ~~~~~

FLAGS:
ACK bit -> 1 ektos an eina proto packet

RST bit -> if 1: connection reset 

SYN bit -> Syncr seq numbers, declares connections initiate 
    only once for each side of the connection on first packet / otherwise 0

FIN bit -> terminates connection

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

CODE DUMP
