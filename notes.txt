TIMELINE                                        EVENT               STATUS
1. Make socket (initialize),                    microtcp_socket()   DONE

2. Ascociate the packet with it's end host,     microtcp_bind()     DONE

3. Establish a connection,                      microtcp_connect()  DONE

4. Accept the incoming connection,              microtcp_accept()   weekend

5. Close the established connection,            microtcp_shutdown() weekend

6. Bandwidth testing                            bandwidth_test()    monday

TO KNOW (for examination)

~ LEARN EACH ARGUMENT's OPERATION (all functions)

~ socket()      (operation / return)
~ microtcp_sock_t fields && initialized values (why / reason)

~ bind()        (operation / return)    

~ connect()     (operation / return)
    -the casting to uint8_t is done because thats the required type

    -sendto(): if address is wrong then it returns -1, else if all good
    the size (in bytes) of the packet that is about to be sent is returned
    at first the size is 0 thats why we use it for error checking olny.

    -recvfrom(): blocks the flow of the program until the data reached the
    address (provided in the arguents). When data reached target it returns
    the size in bytes. If invalid, -1 is returned.

    -socket-recbuf: initialized in the establishment of connection.
    initialized with malloc of the defined buffer length.

    NOTES FOR CONNECT()
        -> We are implementing the 1st and the 3rd handshake. At the same time
        accept() checks 1st handshake and replies with the 2nd, which we use 
        to make the 3rd and final. If 2nd is succesfull we assume that the connection
        is established.


~ HEADER
    a. added a definition for control bits    ### ask in exam if sequence is correct


USEFUL INFO
SEGMENT --> Bytes
WINDOW  --> Segments


~> SEND AND RECEIVE PACKET NEXT PHASE




~~~~~ NOTES FOR TODAY ~~~~~

FLAGS:
ACK bit -> 1 ektos an eina proto packet

RST bit -> if 1: connection reset 

SYN bit -> Syncr seq numbers, declares connections initiate 
    only once for each side of the connection on first packet / otherwise 0

FIN bit -> terminates connection

